 const CoilWorkableElectricMultiblockMachine = Java.loadClass("com.gregtechceu.gtceu.api.machine.multiblock.CoilWorkableElectricMultiblockMachine")
Java.loadClass("com.gregtechceu.gtceu.api.GTValues")
GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
  event.create('dehydration_unit')
    .category('drac')
    .setEUIO('in')
    .setMaxIOSize(2, 2, 2, 2) 
    .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
    .setSound(GTSoundEntries.CHEMICAL);

  event.create('polymerization_chamber')
    .category('drac')
    .setEUIO('in')
    .setMaxIOSize(3, 0, 5, 2) 
    .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
    .setSound(GTSoundEntries.CHEMICAL);
})

GTCEuStartupEvents.registry('gtceu:machine', event => {	
 event.create('large_dehydration_unit', 'multiblock')
        .rotationState(RotationState.ALL)
        .machine((holder) => new CoilWorkableElectricMultiblockMachine(holder))
		.recipeTypes([(GTRecipeTypes.PYROLYSE_RECIPES), 'dehydration_unit'])
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_NON_PERFECT, GTRecipeModifiers.BATCH_MODE, (machine, recipe) => GTRecipeModifiers.pyrolyseOvenOverclock(machine, recipe)])
        .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("BBBBBBBBB", "BGGGGGGGB", "BGGGGGGGB", "BGGGGGGGB", "BBBBBBBBB")
			.aisle("BBBBBBBBB", "HVVVVVVVH", "DVDDDDDVD", "HVVVVVVVH", "BGGGGGGGB")
			.aisle("BBBBBBBBB", "DVDDDDDVD", "DPPPPPPPM", "DVDDDDDVD", "BGGGGGGGB")
			.aisle("BBBBBBBBB", "HVVVVVVVH", "DVDDDDDVD", "HVVVVVVVH", "BGGGGGGGB")
			.aisle("BBBBKBBBB", "BGGGGGGGB", "BGGGGGGGB", "BGGGGGGGB", "BBBBBBBBB")
            .where('B', Predicates.blocks('gtceu:clean_machine_casing').setMinGlobalLimited(15) 
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.abilities(PartAbility.EXPORT_ITEMS, PartAbility.EXPORT_FLUIDS, PartAbility.INPUT_ENERGY, PartAbility.IMPORT_FLUIDS, PartAbility.IMPORT_ITEMS)))
			.where("M", Predicates.abilities(PartAbility.MUFFLER).setExactLimit(1))
            .where("G", Predicates.blocks("gtceu:tempered_glass"))
            .where("V", Predicates.heatingCoils())
            .where("H", Predicates.blocks("gtceu:hv_hermetic_casing"))
			.where("D", Predicates.blocks("gtceu:heat_vent"))
			.where("P", Predicates.blocks("gtceu:titanium_pipe_casing"))
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))
            .build())
        .workableCasingModel("gtceu:block/casings/solid/machine_casing_clean_stainless_steel", "gtceu:block/multiblock/cracking_unit")   

 event.create('large_polymerization_chamber', 'multiblock')
        .rotationState(RotationState.ALL)
        .machine((holder) => new CoilWorkableElectricMultiblockMachine(holder))
		.recipeType('polymerization_chamber')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_PERFECT_SUBTICK, GTRecipeModifiers.BATCH_MODE, (machine, recipe) => GTRecipeModifiers.pyrolyseOvenOverclock(machine, recipe)])
        .appearanceBlock(() => Block.getBlock('gtceu:inert_machine_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("WWW##BBBBBBB##AAAAA","WGW##BGGGGGB##AGGGA","WGW##BGGGGGB##AGGGA","WGW##BGGGGGB##AGGGA","WWW##BBBBBBB##AAAAA","################A##","################A##","###################")
			.aisle("WWW##BBBBBBB##AAAAA","WIPPPPCSCSCB##AHHHG","WDW##BCSCSCPPPPHHHG","WIPPPPCSCSCB##AHHHG","WGW##BGGGGGB##AAAAA","###############AAA#","###############AAA#","###############AAA#")
			.aisle("WWW##BBBBBBB##AAAAA","WDW##BCSCSCPPPPHHHG","WDW##BHHHHHH###IIHG","WDW##BCSCSCPPPPHIHG","WGW##BGGGGGB##AAIAA","##############AAIAA","##############AAIAA","###############AMA#")
			.aisle("WWW##BBBBBBB##AAAAA","WIPPPPCSCSCB##AHHHG","WDW##BCSCSCPPPPHHHG","WIPPPPCSCSCB##AHHHG","WGW##BGGGGGB##AAAAA","###############AAA#","###############AAA#","###############AAA#")
			.aisle("WWW##BBBKBBB##AAAAA","WGW##BGGGGGB##AGGGA","WGW##BGGGGGB##AGGGA","WGW##BGGGGGB##AGGGA","WWW##BBBBBBB##AAAAA","################A##","################A##","###################")
            .where('B', Predicates.blocks('gtceu:inert_machine_casing').setMinGlobalLimited(15) 
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.abilities(PartAbility.EXPORT_ITEMS, PartAbility.EXPORT_FLUIDS, PartAbility.INPUT_ENERGY, PartAbility.IMPORT_FLUIDS, PartAbility.IMPORT_ITEMS)))
            .where("G", Predicates.blocks("gtceu:laminated_glass"))
            .where("C", Predicates.heatingCoils())
            .where("W", Predicates.blocks("gtceu:watertight_casing"))
			.where("A", Predicates.blocks("gtceu:shock_proof_cutting_casing"))
			.where("S", Predicates.blocks("gtceu:superconducting_coil"))
			.where("D", Predicates.blocks("gtceu:extreme_engine_intake_casing"))
			.where("P", Predicates.blocks("gtceu:ptfe_pipe_casing"))
			.where("I", Predicates.blocks("gtceu:tungstensteel_pipe_casing"))
			.where("H", Predicates.blocks("gtceu:heat_vent"))
            .where("M", Predicates.abilities(PartAbility.MUFFLER).setExactLimit(1))
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))
			.where('#', Predicates.any())
            .build())
        .workableCasingModel("gtceu:block/casings/solid/machine_casing_inert_ptfe", 'gtceu:block/machines/replicator')
})