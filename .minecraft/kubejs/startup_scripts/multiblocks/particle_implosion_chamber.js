GTCEuStartupEvents.registry('gtceu:machine', event => {
    event.create('particle_implosion_chamber', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType('implosion_compressor')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_NON_PERFECT, GTRecipeModifiers.BATCH_MODE])
        .appearanceBlock(GTBlocks.MACHINE_CASING_UHV)
        .pattern(definition => FactoryBlockPattern.start()
        .aisle('AAAAA', 'AAAAA', 'AAAAA', 'AAAAA', 'AAAAA')
        .aisle('AAAAA', 'ABBBA', 'ABBBA', 'ABBBA', 'AAAAA')
        .aisle('AAAAA', 'A###A', 'A###A', 'A###A', 'AAAAA')
        .aisle('AAOAA', 'CCCCC', 'CCCCC', 'CCCCC', 'AAAAA')
        .where('O', Predicates.controller(Predicates.blocks(definition.get())))
        .where('A', Predicates.blocks("gtceu:atomic_casing")
        .or(Predicates.autoAbilities(definition.getRecipeTypes()))
        .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
        .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
        )
        .where('B', Predicates.blocks('gtceu:titanium_firebox_casing'))
        .where('C', Predicates.blocks('kubejs:fusion_glass_mk2'))
        .where('#', Predicates.any())
        .build()
    )
    .workableCasingModel("gtceu:block/casings/gcym/atomic_casing", 'gtceu:block/multiblock/implosion_compressor')
    })


